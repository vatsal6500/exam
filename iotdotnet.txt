##->`.Net MQTT`<-

> Create asp.net program using version 5 (ne hoi tho 3.1 user kari ne try kari lego tenson ne leta brbr?)
> create two class library file client and brocker and do as following.

##->==Broker==<-

>> packages
<PackageReference Include="MQTTnet" Version="3.0.16" />
<PackageReference Include="Serilog" Version="2.10.0" />
<PackageReference Include="Serilog.Sinks.Console" Version="3.1.1" />

- install from nuget namager select above specified version

##->==publisher.cs==<-

using MQTTnet;
using MQTTnet.Client;
using MQTTnet.Client.Options;
using System;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var mqttfactory = new MqttFactory();
            var client = mqttfactory.CreateMqttClient();
            var options = new MqttClientOptionsBuilder().WithClientId(Guid.NewGuid().ToString())
            .WithTcpServer("broker.emqx.io", 1883).WithCleanSession().Build();
            Console.WriteLine("Hello World!");

            client.UseConnectedHandler(async e =>
            {
                Console.WriteLine("Connected To Mqtt");
                var topicFilter = new TopicFilterBuilder().WithTopic("test1").Build();
                await client.SubscribeAsync(topicFilter);
                /* var topicFilter1 = new TopicFilterBuilder().WithTopic("Testing2").Build();
                 await client.SubscribeAsync(topicFilter1);*/

            });

            client.UseDisconnectedHandler(e =>
            {
                Console.WriteLine("DisConnected To Mqtt");
            });

            client.UseApplicationMessageReceivedHandler(e =>
            {
                Console.WriteLine($"Recieved Message-{Encoding.UTF8.GetString(e.ApplicationMessage.Payload)}");
            });



            await client.ConnectAsync(options);

            Console.WriteLine("Press Any Key To Continue");
            Console.ReadKey();



        }
    }
}


##->==subscriber.cs==<-

using MQTTnet;
using MQTTnet.Client;
using MQTTnet.Client.Options;
using System;
using System.Threading.Tasks;

namespace ConsoleAppSub2
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            var mqttfactory = new MqttFactory();
            var client = mqttfactory.CreateMqttClient();
            var options = new MqttClientOptionsBuilder().WithClientId(Guid.NewGuid().ToString())
            .WithTcpServer("broker.emqx.io", 1883)
            .WithCleanSession()
            .Build();
            client.UseConnectedHandler(e =>
            {
                Console.WriteLine("Connected To Mqtt");
            });

            client.UseDisconnectedHandler(e =>
            {
                Console.WriteLine("DisConnected To Mqtt");
            });
            await client.ConnectAsync(options);
            while (true)
            {
                Console.WriteLine("Please Press a key to publish the message");
                String message = Console.ReadLine();

                await PublishMessageAsync(client,message);
            }
            
            await client.DisconnectAsync();
        }

        private static async Task PublishMessageAsync(IMqttClient client,String Message)
        {
            string messagePayload = Message;
            var message = new MqttApplicationMessageBuilder().WithTopic("test1").WithPayload(messagePayload).WithAtLeastOnceQoS().Build();

            if (client.IsConnected)
            {
                await client.PublishAsync(message);
            }

        }
    }
}