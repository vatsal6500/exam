(i2c+ldr+database+arduino)Arduino
Arduino Raspberry
GND pin20(GND)
A4 pin3
A5 pin5

LDR       Arduino
combine A0
small GND
Big	   5V

or
LDR       Arduino
double	pin-A0
green(LDR)		ground
yellow(Register)	3v / 5v

===========================================
#include<Wire.h>
int i2cData;
int e,c;
int ldr;
const int ledPin = 13;
char ldr1;
byte br;
void setup() {
  //join I2C bus as slave with address 8
  Wire.begin(0x8);
  Serial.begin(9600);
  Wire.onReceive(receiveEvent);
  Wire.onRequest(sendData);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, HIGH);

}

void receiveEvent(int howMany)
{
  while (Wire.available())
  {
    c = Wire.read();
    digitalWrite(ledPin, c);

  }
}

void loop() {
  // put your main code here, to run repeatedly:
  delay(1000);
  ldr = analogRead(A0);

  br = (int)ldr;
   
  digitalWrite(13, HIGH);
  Serial.println(br);
  //sendData();
  //delay(100);
}

void sendData()
{
  delay(1000);
  //ldr1 = 'A';
  Wire.write(br);
}


============================================================
raspberry pi code

from smbus import SMBus
import sqlite3
connection = sqlite3.connect("ldrstore.db")
crsr = connection.cursor()

#sql_command = """CREATE TABLE IF NOT EXISTS data(id integer PRIMARY KEY AUTOINCREMENT, data integer);"""
#print("table created")
crsr.execute("CREATE TABLE IF NOT EXISTS data3(id integer PRIMARY KEY AUTOINCREMENT, data varchar(5000));")
addr = 0X8
bus = SMBus(1)
numb = 1
print("Enter 1 for ON or 0 for OFF")
while numb == 1:
    
    ldr = bus.read_byte_data(addr,0x8)
    print(ldr)
    ledstate = input(">>>>")
    if ledstate == "1":
        #bus.write_byte(addr,0X1)
        #printdata = bus.write_byte(addr,0X1)
        ldr = bus.read_byte_data(addr,0x8)
        print(str(ldr))
        crsr.execute("INSERT INTO data3(id,data) VALUES(NULL,"+(str(ldr))+")")
        connection.commit()
        #connection.close()
    elif ledstate == "0":
        #bus.write_byte(addr,0X0)
        #printdata = bus.write_byte(addr,0X0)
        ldr = bus.read_byte_data(addr,0x8)
        print(str(ldr))
        crsr.execute("INSERT INTO data3(id,data) VALUES(NULL,"+(str(ldr))+")")
        connection.commit()
        #connection.close()
    else:
        numb = 0
=================================================================
pir raspebbery pi)
GND -> pin 6(GND)
VCC -> pin 2(VCC)
Data -> pin 12

LED
+ -> pin 18
-  -> GND

import RPi.GPIO as GPIO
import time
import sqlite3
import datetime
connection = sqlite3.connect("ldrstore.db")
crsr = connection.cursor()

#sql_command = """CREATE TABLE IF NOT EXISTS data(id integer PRIMARY KEY AUTOINCREMENT, data integer);"""
#print("table created")
crsr.execute("CREATE TABLE IF NOT EXISTS data3(id integer PRIMARY KEY AUTOINCREMENT, data varchar(5000));")

GPIO.setmode(GPIO.BCM)
GPIO.setup(24,GPIO.OUT)
GPIO.setup(18,GPIO.IN)
while(True):
	myin = GPIO.input(18)
	if myin == True:
		print("Motion Detected")
		date = str(datetime.datetime.now())
		print(date)
		print(str(date))
		crsr.execute("INSERT INTO data3(data) VALUES(?)",[date])
		connection.commit()
		time.sleep(1)
		GPIO.output(24,True)
		time.sleep(0.5)
		GPIO.output(24,False)
		time.sleep(0.5)
		crsr1 = connection.cursor()

		crsr1.execute("SELECT * FROM data3")

		ans = crsr1.fetchall()

		for row in ans:
			print(row)
=============================================

================== UltraSonic with sqlite ==========================
Raspberry
VCC -> Pin2
Trigger -> pin-40
Echo -> Pin-38
GND -> GND

import RPi.GPIO as GPIO
import time
import sqlite3
connection = sqlite3.connect("UltraDB.db")
TRIG=21
ECHO=20

#BCM  match port and  gpio
GPIO.setmode(GPIO.BCM)

while True:
    print("distance measurement in progress");

    GPIO.setup(TRIG,GPIO.OUT)
    GPIO.setup(ECHO,GPIO.IN)

    GPIO.output(TRIG,False)
    print("waiting for sensor to settle");

    time.sleep(0.2)
    GPIO.output(TRIG,True)

    time.sleep(0.00001)
    GPIO.output(TRIG,False)

    while GPIO.input(ECHO)==0:
        pulse_start=time.time()

    while GPIO.input(ECHO)==1:
        pulse_end=time.time()

    pulse_duration=pulse_end-pulse_start
    dist=pulse_duration*17150

    dist=round(dist,2)
    print("distance:",dist,"cm")
    time.sleep(2)

    crsr = connection.cursor()
       
    sql_command = """CREATE TABLE IF NOT EXISTS ultraSTbl (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    distance TEXT);"""
    print ("table created")
    crsr.execute(sql_command)
    val = str(dist)
    crsr.execute("INSERT INTO ultraSTbl (distance) values(?)",[val])
    crsr.execute(sql_command)
    connection.commit()
       
    crsr1 = connection.cursor()

    crsr1.execute("select * from ultraSTbl")

    ans = crsr1.fetchall()
    print ("Db valuess----")
    print (ans)

=============================== ULTRASONIC WITH MQTT ===============
Raspberry
VCC -> Pin2
Trigger -> pin-40
Echo -> Pin-38
GND -> GND

import RPi.GPIO as GPIO
import paho.mqtt.client as mqtt
import sqlite3
import time
TRIG=21
ECHO=20

GPIO.setmode(GPIO.BCM)

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.connect(broker_url, broker_port)



while True:
    print("distance measurement in progress");

    GPIO.setup(TRIG,GPIO.OUT)
    GPIO.setup( ECHO,GPIO.IN)

    GPIO.output(TRIG,False)
    print("waiting for sensor to settle");

    time.sleep(0.2)
    GPIO.output(TRIG,True)

    time.sleep(0.00001)
    GPIO.output(TRIG,False)

    while GPIO.input(ECHO)==0:
            pulse_start=time.time()

    while GPIO.input(ECHO)==1:
            pulse_end=time.time()

    pulse_duration=pulse_end-pulse_start
    distance=pulse_duration*17150

    distance=round(distance,2)
    print("distance:",distance,"cm")
    client.publish(topic="it", payload=distance,qos=1,retain=False)
    time.sleep(2)


======================= ThingsSpeak ============


import paho.mqtt.publish as publish
import psutil
import string
channel_ID="1798125"
mqtt_host="mqtt3.thingspeak.com"
mqtt_client_ID="GhwaFjQbDjoeORoeJyoHIR8"
mqtt_username="GhwaFjQbDjoeORoeJyoHIR8"
mqtt_password="ma28GsoL6SEj6SfAUNNLu/z2"
t_transport="websockets"
t_port=80
topic="channels/"+channel_ID+"/publish"
while(True):
cpu_percent=psutil.cpu_percent(interval=10)
ram_percent=psutil.virtual_memory().percent
payload="field1="+ str(cpu_percent) + "&field2=" + str(ram_percent)
try:
print("Writing Payload = ",payload,"to host : " ,mqtt_host , "clientID= ",mqtt_client_ID,"user ",mqtt_username," PWD ", mqtt_password)
publish.single(topic,payload,hostname=mqtt_host,transport=t_transport,port=t_port,client_id=mqtt_client_ID, auth={'username' : mqtt_username,'password' : mqtt_password})
except (keyboardInterrupt):
break
except Exception as e:
print(e)


===========================ir + sqlitedb=======================================

GND -> pin 6(GND)
VCC -> pin 2(VCC)
Data -> pin 12

LED
+ -> pin 3
-  -> pin 14 - GND

import RPi.GPIO as IO
import time
import sqlite3
import datetime
connection = sqlite3.connect("test.db")
crsr = connection.cursor()
crsr.execute("CREATE TABLE IF NOT EXISTS test(id integer PRIMARY KEY AUTOINCREMENT, data varchar(5000));")
IO.setwarnings(False)
IO.setmode(IO.BOARD)
IO.setup(8,IO.IN)
IO.setup(3,IO.OUT)

while 1:
	if IO.input(8) == True:
		print("Obstacle detected")
		IO.output(3,True)
		date = str(datetime.datetime.now())
		print(date)
		print(str(date))
		crsr.execute("INSERT INTO test(data) VALUES(?)",[date])
		connection.commit()
		

	else:
		print("Obstacle not detected")
		IO.output(3,False)
		date = str(datetime.datetime.now())
		print(date)
		print(str(date))
		crsr.execute("INSERT INTO test(data) VALUES(?)",[date])
		connection.commit()
crsr1 = connection.cursor()

crsr1.execute("SELECT * FROM test")

ans = crsr1.fetchall()

for row in ans:
    print(row)
========================================================================================
========================================SPI=================================================
Arduino 	Raspberry
11		pin19
12		pin21
13		pin23
GND		pin25(GND)


##->spi.c<-
-#include<SPI.h>
char buf[100];
byte c=0,b=0;
volatile byte pos;
volatile boolean processing;
byte i;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(MISO,OUTPUT);
  pinMode(MOSI,INPUT);
  SPCR |=_BV(SPE);
  pos=0;
  processing=false;
  SPI.attachInterrupt();
}
ISR(SPI_STC_vect)
{
  c=SPDR;
  processing=true;
}
void loop() {
  // put your main code here, to run repeatedly:
  if(processing)
  {
    Serial.println(c);
    processing=false;
    SPDR=c;
    i=i+1;
  }
}

##->spi.py<-
import spidev
import time

spi = spidev.SpiDev(0,0)
spi.open(0,0)
msg = 0XAA
spi.max_speed_hz=115200
while 1 :
	spi.writebytes([0X4, 0X06])
	y = spi.readbytes(2)
	print(y)
	time.sleep(0.5)

========================================================================================
========================================SPI + LDR=================================================
Arduino 	Raspberry
11		pin19
12		pin21
13		pin23
GND		pin25(GND)


##->spi.c<-
-#include<SPI.h>
char buf[100];
byte c=0,b=0;
volatile byte pos;
volatile boolean processing;
byte i;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(MISO,OUTPUT);
  pinMode(MOSI,INPUT);
  SPCR |=_BV(SPE);
  pos=0;
  processing=false;
  SPI.attachInterrupt();
}
ISR(SPI_STC_vect)
{
  c=SPDR;
  processing=true;
}
void loop() {
  // put your main code here, to run repeatedly:
  if(processing)
  {
    Serial.println(c);
    processing=false;
    SPDR=c;
    i=i+1;
  }
}

##->spi.py<-
import spidev
import time

spi = spidev.SpiDev(0,0)
spi.open(0,0)
msg = 0xAA
spi.max_speed_hz = 115200
while 1:

    spi.writebytes([0x4,0x06])
    resp = spi.xfer2([0xAA])
    #print (resp)
    #y = spi.readbytes(2)
    y =  resp[0]
    if (y != 0x80):
            print (y)
    time.sleep(0.2)

===========================python code=============================================
import sqlite3
import paho.mqtt.client as mqtt

broker_url="broker.emqx.io"
broker_port=1883
client=mqtt.Client()
client.connect(broker_url,broker_port)

connection = sqlite3.connect("manual42.db")
crsr = connection.cursor()

sql_command = """ CREATE TABLE IF NOT EXISTS test(id INTEGER PRIMARY KEY AUTOINCREMENT,name VARCHAR(50),age INTEGER,gender VARCHAR(50)) """
crsr.execute(sql_command)
print("table created...")

for i in range(0):
print("Enter Name : ")
name=input()
print("Enter Age : ")
age=input()
print("Enter Gender : ")
gender = input()
print(name)
crsr.execute("INSERT INTO test(name,age,gender) values(?,?,?)",(name,age,gender))
connection.commit()

crsr.execute("select * from test")
allrecord=crsr.fetchall()
print(allrecord)

crsr.execute("select name from test")
ans=crsr.fetchall()
i=ans

for i in range (len(ans)):
print(ans[i])
client.publish(topic="VIRTUAL_A",payload="name: " + str(ans[i]),qos=0,retain=False)
print("msg published...")