##->`SENSORS`<-

##->==IR==<-
import RPi.GPIO as IO
IO.setwarnings(False)
IO.setmode(IO.BOARD)
IO.setup(8, IO.IN)
IO.setup(3, IO.OUT)

while 1:
	if(IO.input(8)==True):
		print("Obstacle detectd!!")
		IO.output(3, True)
	else:
		print("Obstacle not detected!!")
		IO.output(3,False)

> Connections
(Sensor)       (PI)
GND			=  pin6
vcc      =   pin4
data     =    pin8

>LED

small     =  pin9 or pin14
big       =    pin3

##->==PIR==<-
import RPi.GPIO as GPIO
import time
GPIO.setmode(GPIO.BCM)
GPIO.setup(24,GPIO.OUT)
GPIO.setup(18,GPIO.IN)

while(True):
	myin=GPIO.input(18)
	if myin==True:
		print("motion detected")
		time.sleep(1)
		GPIO.output(24, True)
		time.sleep(0.5)
		GPIO.output(24, False)
		time.sleep(0.5)

> Connections
(Sensor)       (PI)
GND			=  pin6
vcc      =   pin2 or pin4
data     =    pin12

##->==ultrasonic==<-
import RPi.GPIO as GPIO
import paho.mqtt.client as mqtt
import sqlite3
import time
TRIG=21
ECHO=20

GPIO.setmode(GPIO.BCM)

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.connect(broker_url, broker_port)



while True:
	print("distance measurement in progress");

   GPIO.setup(TRIG,GPIO.OUT)
	GPIO.setup( ECHO,GPIO.IN)

GPIO.output(TRIG,False)
	print("waiting for sensor to settle");

time.sleep(0.2)
	GPIO.output(TRIG,True)

time.sleep(0.00001)
	GPIO.output(TRIG,False)

while GPIO.input(ECHO)==0:
		pulse_start=time.time()

while GPIO.input(ECHO)==1:
		pulse_end=time.time()

pulse_duration=pulse_end-pulse_start
	distance=pulse_duration*17150

distance=round(distance,2)
	print("distance:",distance,"cm")
	client.publish(topic="it", payload=distance,qos=1,retain=False)
	time.sleep(2)

> Connections
(Sensor)       (PI)
vcc      =    pin4
echo     =  pin38
trig       =   pin40
gnd      =   pin6


##->==LDR.c==<-

-#include<Wire.h>
int ldr;
const int ledPin = 13;
int c;
void setup() {
// put your setup code here, to run once:
// pinMode(13,OUTPUT);
Wire.begin(0x8);
Serial.begin(9600);
Wire.onRequest(sendData);
pinMode(ledPin,OUTPUT);
digitalWrite(ledPin,LOW);
}
void loop() {
ldr = analogRead(A0);
//logic for i2c
if(ldr<50)
{
digitalWrite(ledPin,HIGH);
}
else
{
digitalWrite(ledPin,LOW);
}
Serial.println(ldr);
delay(100);
}
void sendData() {
Wire.write(ldr);
}
##->==NEW LDR .C==<-

int ldr;
void setup() {
  // put your setup code here, to run once:
  pinMode(13,OUTPUT);
  Serial.begin(115200);
}

void loop() {
  // put your main code here, to run repeatedly:
  ldr = analogRead(A0);
  if(ldr<50)
  {
    digitalWrite(13,HIGH);
  }
  else{
    digitalWrite(13,LOW);
  }
  Serial.println(ldr);
  delay(100);
}

##->==LDR.py==<-
from smbus import SMBus
import time
addr = 0x8
bus = SMBus(1)
numb = 1
print("Enter 1 for ON or 0 for OFF")
while 1:
y = bus.read_byte_data(addr,1)
print (y)

##->==USB.py==<-
``` python
import serial

#if _name=='main_':
ser=serial.Serial('/dev/ttyACM0',9600,timeout=1)
ser.flush()
while True:
if ser.in_waiting>0:
line=ser.readline().decode('utf-8').rstrip()
-#rstrip for storing whole line in buffer 4-500 characters
print(line) 
```

##->==USB.c==<-
void setup()
{
Serial.begin(9600);
}
3T75c8qU
void loop()
{
Serial.println("Hello From Arduino!");
delay(1000);
}

> Connections
(Sensor)       (PI)
tr				rx
rx				tx


##->==ThingsSpeak==<-
import paho.mqtt.publish as publish
import psutil
import string
channel_ID="1798125"
mqtt_host="mqtt3.thingspeak.com"
mqtt_client_ID="GhwaFjQbDjoeORoeJyoHIR8"
mqtt_username="GhwaFjQbDjoeORoeJyoHIR8"
mqtt_password="ma28GsoL6SEj6SfAUNNLu/z2"
t_transport="websockets"
t_port=80
topic="channels/"+channel_ID+"/publish"
while(True):
	cpu_percent=psutil.cpu_percent(interval=10)
	ram_percent=psutil.virtual_memory().percent
	payload="field1="+ str(cpu_percent) + "&field2=" + str(ram_percent)
	try:
		print("Writing Payload = ",payload,"to host : " ,mqtt_host , "clientID= ",mqtt_client_ID,"user ",mqtt_username," PWD ", mqtt_password)
		publish.single(topic,payload,hostname=mqtt_host,transport=t_transport,port=t_port,client_id=mqtt_client_ID, auth={'username' : mqtt_username,'password' : mqtt_password})
	except (keyboardInterrupt):
		break
	except Exception as e:
		print(e)



##->![Image description](https://i.imgur.com/PYV4crq.png)<-
##->`AKAKATIL`<-